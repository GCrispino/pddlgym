;; logistics domain Typed version.

(define (domain logistics)
  (:requirements :strips :typing) 
  (:types thing)
  (:predicates 
	(in-city ?loc - thing ?city - thing) 
	(at ?obj - thing ?loc - thing) 
	(in ?pkg - thing ?veh - thing)
    (eq ?loc1 - thing ?loc2 - thing)
    (iscity ?x - thing)
    (isplace ?x - thing)
    (islocation ?x - thing)
    (ispackage ?x - thing)
    (istruck ?x - thing)
    (isairplane ?x - thing)
    (isairport ?x - thing)
  )
  (:action LOAD-TRUCK
    :parameters (?pkg - thing ?truck - thing ?loc - thing)
    :precondition (and (at ?truck ?loc) (at ?pkg ?loc)
        (IsPackage ?pkg) (IsTruck ?truck) (IsPlace ?loc))
    :effect (and (not (at ?pkg ?loc)) (in ?pkg ?truck))
  )
  (:action LOAD-AIRPLANE
   :parameters (?pkg - thing ?airplane - thing ?loc - thing)
   :precondition (and (at ?pkg ?loc) (at ?airplane ?loc)
        (IsPackage ?pkg) (IsAirplane ?airplane) (IsPlace ?loc))
   :effect (and (not (at ?pkg ?loc)) (in ?pkg ?airplane))
  )
  (:action UNLOAD-TRUCK
   :parameters (?pkg - thing ?truck - thing ?loc - thing)
   :precondition (and (at ?truck ?loc) (in ?pkg ?truck)
        (IsPackage ?pkg) (IsTruck ?truck) (IsPlace ?loc))
   :effect (and (not (in ?pkg ?truck)) (at ?pkg ?loc))
  )
  (:action UNLOAD-AIRPLANE
   :parameters (?pkg - thing ?airplane - thing ?loc - thing)
   :precondition (and (in ?pkg ?airplane) (at ?airplane ?loc)
        (IsPackage ?pkg) (IsAirplane ?airplane) (IsPlace ?loc))
   :effect (and (not (in ?pkg ?airplane)) (at ?pkg ?loc))
  )
  (:action DRIVE-TRUCK
   :parameters (?truck - thing ?loc_from - thing ?loc_to - thing ?city - thing)
   :precondition (and (not (eq ?loc_from ?loc_to)) (at ?truck ?loc_from) (in-city ?loc_from ?city) (in-city ?loc_to ?city)
        (IsTruck ?truck) (IsPlace ?loc_from) (IsPlace ?loc_to) (IsCity ?city))
   :effect (and (not (at ?truck ?loc_from)) (at ?truck ?loc_to))
  )
  (:action FLY-AIRPLANE
   :parameters (?airplane - thing ?loc_from - thing ?loc_to - thing)
   :precondition (and (not (eq ?loc_from ?loc_to)) (at ?airplane ?loc_from)
        (IsAirplane ?airplane) (IsAirport ?loc_from) (IsAirport ?loc_to))
   :effect (and (not (at ?airplane ?loc_from)) (at ?airplane ?loc_to))
  )
)
